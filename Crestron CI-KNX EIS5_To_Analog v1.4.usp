/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: Christophe Hombrouck
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#OUTPUT_SHIFT 1
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
ANALOG_INPUT _SKIP_,Value,_SKIP_;
// STRING_INPUT 

STRING_OUTPUT Absolute_Value_Text;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER State,NextState,uMantissa,Exponent,Power;
INTEGER RxOK;
SIGNED_INTEGER sMantissa;
LONG_INTEGER luMantissa;
// SIGNED_INTEGER
STRING CommandString[200],AbsoluteValue[10];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function OutputValues(Integer Number)
{
	Exponent = (Number >> 11) & 0x0F;
	Power = 1;
	if(Exponent != 0)
	{
 		Power = Power << Exponent;
		//Trace("Power = %u",Power);   	
	}
	if(Number & 0x8000)
	{
		//uMantissa = Number & 0x7FF;
		//Trace("Positive Mantissa: %d",uMantissa);
		uMantissa = 65536 - Number;
		uMantissa = uMantissa & 0x7FF;
		//Trace("Negative Mantissa: %d",sMantissa);
		luMantissa = uMantissa*Power;
		MakeString(AbsoluteValue,"%lu",luMantissa);
		MakeString(Absolute_Value_Text,"-%s,%s",left(AbsoluteValue,len(AbsoluteValue)-2),right(AbsoluteValue,2)); 
	}
	else
	{
		uMantissa = Number & 0x7FF;
		luMantissa = uMantissa*Power;
		Makestring(AbsoluteValue,"%lu",luMantissa);
		MakeString(Absolute_Value_Text,"%s,%s",left(AbsoluteValue,len(AbsoluteValue)-2),right(AbsoluteValue,2));
	}
    
	
	
    
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/



/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE Value
{
 	OutputValues(Value);
}




/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	State = 0;
	NextState = 0;
	RxOK = 1;
}


